generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// npx prisma migrate dev --name 
// npx prisma db pull
// npx prisma generate

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in    Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(uuid())                // 유저 고유번호
  email         String?    @unique @db.VarChar(255)            // 유저 이메일
  name          String?   @db.VarChar(255)                     // 유저 이름
  emailVerified DateTime? @db.Timestamptz(6)                    
  image         String?                                        // 유저 프로필 이미지
  created_at    DateTime? @default(now()) @db.Timestamptz(6)   // 만든날짜
  accounts      Account[]
  sessions      Session[]
  novels        Novel[]                                        // 유저가 가진 소설들
}

model Novel {
  id            String   @id @default(uuid())                  // 소설 고유번호
  title         String   @db.VarChar(255)                      // 소설 제목
  description   String   @db.Text                              // 소설 설명
  userId        String                                         // 소설 소유자
  image         String?                                        // 소설 썸네일
  created_at    DateTime? @default(now()) @db.Timestamptz(6)   // 만든날짜
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)   // 수정날짜
  genres        NovelGenre[]                                   // 장르
  storyFolders  StoryFolder[]                                  // 소설에 포함된 스토리폴더들
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StoryFolder {
  id            String   @id @default(uuid())                  // 폴더 고유번호
  name          String   @db.VarChar(255)                      // 폴더 이름
  novelId       String                                         // 소설 고유번호
  created_at    DateTime? @default(now()) @db.Timestamptz(6)   // 만든날짜
  files         StoryFile[]                                    // 폴더에 포함된 파일들
  novel         Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
}

model StoryFile {
  id            String   @id @default(uuid())                  // 파일 고유번호
  name          String   @db.VarChar(255)                      // 파일 이름
  content       String   @db.Text                              // 파일 내용
  folderId      String                                         // 폴더 고유번호
  created_at    DateTime? @default(now()) @db.Timestamptz(6)   // 만든날짜
  folder        StoryFolder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model Genre {
  id            String   @id @default(uuid())                  // 장르 고유번호
  name          String   @db.VarChar(255) @unique              // 장르명
  novels         NovelGenre[]                                  // 소설
}

model NovelGenre {
  novelId String                                               // 소설 고유번호
  genreId String                                               // 장르 고유번호


  novel   Novel   @relation(fields: [novelId], references: [id], onDelete: Cascade)
  genre   Genre   @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([novelId, genreId])                                    // 복합 기본 키
  @@unique([novelId, genreId])                                // 조합의 유일성 보장
}